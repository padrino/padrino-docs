---
:author: Foo Bar
:title: Running Padrino on JRuby
---
p. You can run Padrino (0.9.29 is tested) on JRuby 1.6.2.

h2. Install on JRuby

You can easily install Padrino on jruby when you use "rvm":https://rvm.beginrescueend.com/ :

pre[bash]. $ rvm use --create jruby-1.6.2@padrino
$ gem install padrino

Create Padrino project just as you do when using MRI or REE:

pre[bash]. $ padrino g project jrack-test

@cd ./jrack-test@ and you should edit @Gemfile@:

<pre lang="ruby">
# JRuby deployment requirements
# please add these lines...
gem 'jruby-openssl'
gem 'jruby-rack'
gem 'warbler'
</pre>

Now you can go:

pre[bash]. $ bundle

Then, create the test controller:

pre[ruby]. padrino gen controller index get:index get:hello get:show_path

A controller sample is here:

<pre lang="ruby">
# index.rb
JrackTest.controllers :index do
get :index do
"Hello, JPadrino!"
end

get :hello, :map => '/:id' do
"Hello, #{params[:id]}!"
end

get :show_path, :map => '/show-path/*urls' do
"You accessed: #{params[:urls].inspect}"
end
end
</pre>

Then run:

pre[ruby]. padrino start

You can access @localhost:3000@ as you run padrino on MRI...

h2. How to create WAR

Now you should have installed @warbler@ gem, so you can:

pre[ruby]. warble config

Edit @config/warble.rb@ if you want to apply some customizations. You can access "JRuby-Rack official
README":https://github.com/nicksieger/jruby-rack/#readme and "Warbler
rdoc":http://caldersphere.rubyforge.org/warbler/.

For example, if you want to deploy the app to server root directory, just add to @config/warble.rb@:

pre[ruby].   config.jar_name = "ROOT"

If you are ready, run:

pre[ruby]. warble war

You would get @jrack-test.war@ (the same name as your project diresctory name), and you can deploy this war
file to tomcat! I tested on tomcat 6.0.20, and it works well with quick response.

h2. How to use jdbc mysql with Activerecord

Let's say you have a padrino project set up to use the mysql SQL adapter and Activerecord as the database
component.  You want to switch the adapter from the default mysql implementation to jdbc-mysql to take 
advantage of the native java jdbc implementation.  It's pretty straightforward.  


Edit your @Gemfile@ which probably starts something like this:

<pre lang="ruby">
source :rubygems

# Server requirements (defaults to WEBrick)
# gem 'thin'
# gem 'mongrel'

# Project requirements
gem 'rake'
gem 'sinatra-flash', :require => 'sinatra/flash'

# Component requirements
gem 'erubis', "~> 2.7.0"
gem 'activerecord', :require => "active_record"
gem 'mysql'

# JRuby deployment requirements
# please add these lines...
gem 'jruby-openssl'
gem 'jruby-rack'
gem 'warbler'

</pre>

Replace the mysql gem with the gems for jdbc-mysql and activerecord jdbc mysql support.  Your resulting @Gemfile@
should look like this:

<pre lang="ruby">
source :rubygems

# Server requirements (defaults to WEBrick)
# gem 'thin'
# gem 'mongrel'

# Project requirements
gem 'rake'
gem 'sinatra-flash', :require => 'sinatra/flash'

# Component requirements
gem 'erubis', "~> 2.7.0"
gem 'activerecord', :require => "active_record"
# gem 'mysql'

# JRuby deployment requirements
# please add these lines...
gem 'jruby-openssl'
gem 'jruby-rack'
gem 'warbler'

# mysql-jdbc deployment requirements
gem "activerecord-jdbc-adapter", "1.2.0"
gem "activerecord-jdbcmysql-adapter", "1.2.0"
gem "jdbc-mysql", "~> 5.1.0"
</pre>

Test your changes by creating some models/migrations:

pre[ruby]. padrino g model post title:string body:text

and run the rake tasks:

pre[ruby]. padrino rake ar:drop ar:create ar:migrate --trace

You should see something like this:

<pre lang="ruby">
=> Executing Rake ar:drop ar:create ar:migrate --trace ...
** Invoke ar:drop (first_time)
** Invoke environment (first_time)
** Execute environment
** Execute ar:drop
** Invoke ar:create (first_time)
** Invoke environment 
** Execute ar:create
** Invoke ar:migrate (first_time)
** Invoke environment 
** Execute ar:migrate
==  CreatePosts: migrating =================================================
-- create_table(:posts, {:id=>true, :force=>true, :options=>"ENGINE=MyISAM"})
   -> 0.0910s
   -> 0 rows
==  CreatePosts: migrated (0.0920s) ========================================

** Invoke ar:schema:dump (first_time)
** Invoke environment 
** Execute ar:schema:dump
</pre>

You should now be set to use jdbc-mysql instead of the default mysql connector.  This should allow you to use jndi 
connections defined by application containers like jboss, thus offloading connection property management to the
container. 

Here's a sample jndi connection section in @config/database.rb@:

<pre lang="ruby">
ActiveRecord::Base.configurations[:production] = {
  :adapter   => 'jdbc',
  :jndi      => 'java:jdbc/jndi_my_padrino_project',
  :driver    => 'com.mysql.jdbc.Driver'

}

</pre>
