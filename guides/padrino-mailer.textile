---
:author: Foo Bar
:title: Padrino Mailer
---
This component creates an easy and intuitive interface for delivering email within a Sinatra application. The
"mail":http://github.com/mikel/mail library is utilized to do the bulk of the work. There is full support for
rendering email templates, using an html content type and for file attachments. The Padrino Mailer uses a
familiar Sinatra syntax similar to that of defining routes for a controller.

h2. Configuration

Let's take a look at using the Mailer in an application. By default, the mailer uses the built-in sendmail
binary on the server. However, smtp is also supported using the following declaration in your application:

pre[ruby]. # app/app.rb
set :delivery_method, :smtp => {
:address              => "smtp.gmail.com",
:port                 => 587,
:user_name            => '<username>@gmail.com',
:password             => '<password>',
:authentication       => :plain,
:enable_starttls_auto => true
}

Once those have been defined, the default will become smtp delivery unless overwritten in an individual mail
definition.

h2. Quick Usage

Padrino supports sending any arbitrary email (using either sendmail or smtp) right from your controllers. This
is ideal for 'one-off' emails where the 'full' mailer object is simply unnecessary or too heavy for your
simple task.

Delivering an email within your controller is simple:

pre[ruby]. # app/controllers/session.rb
post :create do
email(:from => "tony@reyes.com", :to => "john@smith.com", :subject => "Welcome!", :body=>"Body")
end

This simple helper will accept any of the standard email attributes and deliver your email in a single
command. You can also use a block, render a template for the body and specify a delivery method:

pre[ruby]. # app/controllers/session.rb
post :create do
email do
from "tony@reyes.com"
to "john@smith.com"
subject "Welcome!"
body render('email/registered')
via :sendmail
end
end

This is all you need to send simple emails. However, Padrino also supports a more 'structured' mailer system
as well.

h2. Mailer Usage

To use the structured mailer syntax, we should define a custom mailer using the @mailer@ block:

pre[ruby]. # app/mailers/sample_mailer.rb
MyAppName.mailer :sample do
email :registration_email do |name, email|
from 'admin@site.com'
to email
subject 'Welcome to the site!'
locals :name => name, :email => email
render 'registration_email'
content_type :html       # optional, defaults to :plain
via :sendmail            # optional, to smtp if defined otherwise sendmail
end
end

Note that this can be created much easier by using the padrino-mailer generator in the terminal:

pre[bash]. $ padrino g mailer Sample registration_email

This mailer defines a mail type called '<tt>registration_mail</tt>' with the specified attributes for
delivery. The <tt>body</tt> method is invoking the render command passing the <tt>name</tt> attribute to the
body message template which should be defined in <tt>[views_path]/mailers/sample/registration_email.erb</tt>
as shown below:

pre[erb]. # ./views/mailers/sample/registration_email.erb
This is the body of the email and can access the <%= name %> variable (note the lack of an <tt>@</tt> 
on <tt>name</tt>). That's all there is to defining the body of the email which can be in plain text or html.

Note that the mailer has full support for content type resolution and the email could also be in the path
@./views/mailers/sample/registration_email.html.erb@ or @./views/mailers/sample/registration_email.plain.erb@
specifying the mime type in the file name as well.

Once the mailer definition has been completed and the template has been defined, the email can be sent using:

pre[ruby]. deliver(:sample, :registration_email, "Bob", "bob@bobby.com")

And that will then deliver the email according the the configured options.

h2. Multipart Emails

The mailer supports multipart emails quite easily:

pre[ruby]. # app/mailers/sample_mailer.rb
mailer :sample do
email :email_with_parts do
from 'admin@site.com'
# ...
text_part { render('path/to/basic.text')  }
html_part render('path/to/basic.html') # shorter part syntax
end
end

You can even specify multiple part types using the @provides@ declaration:

pre[ruby]. # app/mailers/sample_mailer.rb
mailer :sample do
email :email_with_parts do
from 'admin@site.com'
# ...
# renders path/to/basic.html.erb and path/to/basic.plain.erb
provides :plain, :html
render 'path/to/basic'
end
end

These will deliver a multipart/alternative email with the appropriate plain text and html sections.

h2. File Attachments

Using the mailer attaching files to a message is easy:

pre[ruby]. # app/mailers/sample_mailer.rb
mailer :sample do
email :email_with_files do
from 'admin@site.com'
# ...
body "Here are your files!"
add_file :filename => 'somefile.png', :content => File.read('/somefile.png')
add_file '/full/path/to/someotherfile.png'
end
end

This will deliver your email with the appropriate body and the specified files attached.

h2. Defaults

To define mailer defaults for a message, we can do so app-wide or within a @mailer@ block.

<pre lang="ruby"><code># app/app.rb
# Application-wide mailer defaults
set :mailer_defaults, :from => 'admin@site.com'

# app/mailers/sample_mailer.rb
MyAppName.mailers :sample do
defaults :content_type => 'html'
email :registration do |name, age|
# Uses default 'content_type' and 'from' values but can also overwrite them
to      'user@domain.com'
subject 'Welcome to the site!'
locals  :name => name
render  'registration'
end
end
</code></pre>

Using defaults makes sending email even easier when certain attributes are repeated between messages.

h2. Rendering Variations

To render a short body inline:

pre[ruby]. # app/mailers/sample_mailer.rb
mailer :sample do
email :short_email do |name, user|
# ...
body "This is a short body defined right in the mailer itself"
end
end

To render a different template:

pre[ruby]. # app/mailers/sample_mailer.rb
mailer :sample do
email :custom_email do |name, user|
# ...
render('path/to/template') # relative to views_path/mailers
end
end

h2. Testing Email

You can configure the mailer so that it doesn't run during tests. This can be done with:

pre[ruby]. # app/app.rb
configure :test do
  set :delivery_method, :test
end

In the <tt>:test</tt> environment, mail deliveries are stacked up in the <tt>Mail::TestMailer.deliveries</tt>
array. As a convenience, you may add the following to your test configuration:

pre[ruby]. # test/test_config.rb
def pop_last_delivery
Mail::TestMailer.deliveries.pop
end  

Then, you can test email contents like this:

pre[ruby].
it "sets the state to :complete and sends an email" do
email = pop_last_delivery
assert_equal("Thanks for registering", email.subject)
assert_equal("site@site.com", email.from.first)
assert_equal(@user.email, email.to.first)
end

h2. Using helpers in emails

You can use any helpers, included Padrino Helpers, inside your emails.

Just add some code like the following, we recommend you put it somewhere inside config/boot.rb, and you should be good to go:

<pre lang=ruby><code>
Mail::Message.class_eval do
  include Padrino::Helpers::NumberHelpers
  include Padrino::Helpers::TranslationHelpers
end
</code></pre>
